https://github.com/monetaryunit/monetaryunit/commit/488ed32f2ada1d1dd108fc245d025c4d5f252783

consensus: guard against openssl's new strict DER checks

New versions of OpenSSL will reject non-canonical DER signatures. However,
it'll happily decode them. Decode then re-encode before verification in order
to ensure that it is properly consumed.

diff -up monetaryunit-0.9.3/src/key.cpp.strict-der monetaryunit-0.9.3/src/key.cpp
--- monetaryunit-0.9.3/src/key.cpp.strict-der	2014-09-22 14:42:15.000000000 +0000
+++ monetaryunit-0.9.3/src/key.cpp	2015-01-10 13:35:24.641522201 +0000
@@ -227,10 +227,20 @@ public:
     }
 
     bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {
-        // -1 = error, 0 = bad sig, 1 = good
-        if (ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], vchSig.size(), pkey) != 1)
+	// New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.
+	unsigned char *norm_der = NULL;
+	ECDSA_SIG *norm_sig = ECDSA_SIG_new();
+	const unsigned char* sigptr = &vchSig[0];
+	d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size());
+	int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);
+	ECDSA_SIG_free(norm_sig);
+	if (derlen <= 0)
             return false;
-        return true;
+
+	// -1 = error, 0 = bad sig, 1 = good
+	bool ret = ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), norm_der, derlen, pkey) == 1;
+	OPENSSL_free(norm_der);
+	return ret;
     }
 
     bool SignCompact(const uint256 &hash, unsigned char *p64, int &rec) {
